#  ICOS Telemetry Controller
#  Copyright Â© 2022-2024 Engineering Ingegneria Informatica S.p.A.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# This work has received funding from the European Union's HORIZON research 
# and innovation programme under grant agreement No. 101070177.

global:
  icos: {}

metricsWriteEndpoint: http://{{ .Release.Name }}-thanos-receive:19291/api/v1/receive
logsWriteEndpoint: http://{{ .Release.Name }}-opensearch:9200/

# -- the time to wait
# @section -- Alerts
alertsWaitInterval: 60s

alertmanager:
  # -- Enable the AlertManger
  # @section -- Alerts
  enabled: true
  webhookUrl: "http://dpm-url/polman/watcher/api/v1/webhooks/alertmanager"
  image:
    repository: quay.io/prometheus/alertmanager
    tag: v0.26.0
  service:
    ports:
      http:
        containerPort: 9093


thanos:
  enabled: true
  objstoreConfig: |
    type: FILESYSTEM
    config:
      directory: "/tmp"
    prefix: "icos-ctrl"
  receive:
    enabled: true
  compactor:
    enabled: true
  queryFrontend:
    enabled: false
  ruler:
    enabled: true
    sidecars:
    -  name: prometheus-api
       image: hayk96/prometheus-api:latest
       imagePullPolicy: IfNotPresent
       args:
        - --prom.addr=http://localhost:10902
        - --web.listen-address=0.0.0.0:9099
        - --rule.path=/rules
       ports:
         - name: post-api
           containerPort: 9099
       volumeMounts:
        - name: dpm-rules-volume
          mountPath: /rules
          subPath: rules
          readOnly: false
    extraVolumeMounts:
      - name: dpm-rules-volume
        mountPath: /conf/dpm-rules
        subPath: rules
    extraVolumes:
      - name: dpm-rules-volume
        emptyDir: {}
    service:
      extraPorts:
      - name: post-api
        port: 9099
        targetPort: post-api
    persistence:
      enabled: false
    alertmanagersConfig: |-
      alertmanagers:
      - static_configs:
          - {{ .Release.Name }}-telemetry-controller-alertmanager:9093
        scheme: http
        path_prefix: ""
        timeout: 10s
        api_version: v1
    extraFlags:
    - --rule-file=/conf/dpm-rules/*.yml
    config: |-
      groups: []

opensearch:
  enabled: true
  master:
    masterOnly: false
    replicaCount: 1
  data:
    replicaCount: 0
  coordinating:
    replicaCount: 0
  ingest:
    replicaCount: 0
  dashboards:
    enabled: false

grafana:
  # -- Enable Grafana
  # @section -- Grafana
  enabled: true
  # not using useGrafanaIniFile because it creates vaolume and volume mounts
  # but without the possibility to use templates. So we do it manually in extraVolumes
  # and extraVolumeMounts (that both accept templates)
  # config:
    #useGrafanaIniFile: true
    #grafanaIniConfigMap: "{{ .Release.Name }}-telemetry-controller-grafana-config-ini"
  admin:
    existingSecret: "{{ .Release.Name }}-grafana-admin"
  # configure the dashboard provider to read dashboards from /opt/bitnami/grafana/dashboards
  # the provisioned dashboards are mounted there through a volume mounts
  dashboardsProvider:
    enabled: true
    configMapName: "{{ .Release.Name }}-telemetry-controller-grafana-dashboard-provider"

  plugins: "marcusolsson-json-datasource,simpod-json-datasource,grafana-opensearch-datasource"

  icos:
    iam:
      # -- Url of the Keycloak URL
      # @section -- Grafana
      url: https://replace-with-keycloak-url
      # -- Realm
      # @section -- Grafana
      realm: icos-realm
      # -- Client Id for authentication
      # @section -- Grafana
      clientId: replace-with-client-id
      # -- Client Secret for authentication
      # @section -- Grafana
      clientSecret: replace-with-client-secret
      # -- URL for the Token inspection
      # @section -- Grafana
      tokenUrl: https://replace-with-keycloak-url/token
      # -- URL for verifying the token
      # @section -- Grafana
      authUrl: https://replace-with-keycloak-url/auth
      # -- URL for retrieving user info
      # @section -- Grafana
      userInfoUrl: https://replace-with-keycloak-url/userInfo


  # mount the provisioned dashboards. Not using the "dashboardConfigMaps" value
  # because they only support one dashboard in each configmap, while we have all the
  # dashboards in the same configmap
  grafana:
    extraVolumes:
      - name: provisioned-dashboards
        configMap:
          name: "{{ .Release.Name }}-telemetry-controller-grafana-dashboards"
      - name: grafana-ini
        configMap:
          name: "{{ .Release.Name }}-telemetry-controller-grafana-config-ini"
      - name: datasources
        secret:
          defaultMode: 420
          secretName: "{{ .Release.Name }}-grafana-datasources"
    extraVolumeMounts:
      - name: provisioned-dashboards
        mountPath: /opt/bitnami/grafana/dashboards/Provisioned
        readOnly: true
      - name: grafana-ini
        mountPath: /opt/bitnami/grafana/conf/grafana.ini
        subPath: grafana.ini
      - mountPath: /opt/bitnami/grafana/conf/provisioning/datasources
        name: datasources

  # not using this way to define the datasources because it is not possible here to use top-level values (e.g. logsWriteEndpoint)
  #datasources:
  #  secretDefinition: xxx

otel-collector:
  enabled: true
  image:
    repository: harbor.res.eng.it/icos/meta-kernel/observability/otel-collector-icos-image
    tag: 0.0.1-otel-20240104
  service:
    ports:
      otlp:
        containerPort: 4317
